* Install from GIT

This repository includes several plugins. I am well aware that this is 
bad practice. Anyway, here are a few suggestions of how to make use of 
this repository:



** RECOMMENDED: Use macros/tplugin.vim

Short version:

    1. Save a local copy of the tplugin_vim repository under 
       ''~/vimfiles/repos/vimtlib'' (on some systems it's 
       ''~/.vim/repos/vimtlib''). Get it from here:
       http://github.com/tomtom/tplugin_vim

    2. Insert the following line rather at the beginning of your 
       ''vimrc'' file:
       ''runtime repos/tplugin_vim/macros/tplugin.vim''.

       Some plugins in the vimtlib repository require 
       ''plugin/02tlib.vim'' to be loaded first. If you get an error 
       message telling you that ''tlib'' is required, you can either 
       tell me about that error or add the following line to the 
       ''vimrc'' file:
       ''TPlugin! vimtlib 02tlib''.

    3. Run '':TPluginScan! all'' to enable autoloading.

    4. Restart vim.

See doc/tplugin.txt for details.



** Modify the ''runtimepath''

Add the path to the local copy to 'runtimepath':

#Code <<
set runtimepath+={PATH TO YOU LOCAL COPY}/vimtlib

You have the following options to facilitate doing this:


    1. Plugins like Marc Weber's vim-plugin-manager or Tim Pope's 
       pathogen could be of help.


    2. If you choose this option, you will by default load all 
       plugins---even those you don't care about. You can disable 
       specific plugins by setting loaded_* variables in your vimrc 
       file.

       If you have GNU make available, run ''make -f Makefile_vimfiles 
       loaded'', which will generate a file ''macros/vimtlib.vim''. Then 
       add ''runtime macros/vimtlib.vim'' to your ''vimrc' file and 
       ''unlet'' all those ''loaded_*'' variables that refer to those 
       plugins you want to load.

       Example: Load only the tlib, tskeleton, and viki plugins

       #Code <<
       runtime macros/vimtlib.vim
       TLibUse tlib tskeleton viki


    3. vimtlib includes a script macros/tplugin.vim that help managing 
       the runtimepath. This script also allows users to use only 
       certain plugins from the vimtlib repository. See above for 
       details.



** Use symbolic links

You can use the file install_plugin.sh to copy files from a local copy 
of a repository to a master .vim directory. Example:

    install_plugin.sh --update vimtlib/*_vim

See "install_plugin.sh --help" for details.

J. Sukumaran provides a slightly simpler script at: 
http://gist.github.com/580276



** Use symbolic links

Symlink the files to your vimfiles directory. You could use tools like 
graft for this.



** Build vimballs

Vimball recipes for the following plugins are located in the vimballs 
subdirectory.

In the ruby subdirectory, there is a ruby-based script that helps 
automating this process. If you have ruby installed, type 
''...vimtlib/ruby/vimball.rb -h'' to find out which command-line options 
to use. Re-generate all vimballs with ''make -f Makefile_vimtlib 
VIMTLIB=... vba''.

See also:

    - [[http://www.vim.org/scripts/script.php?script_id=1502]\
      [\VimBall plugin]]
    - [[http://vim.wikia.com/wiki/Using_VimBall_with_make]\
      [Using \VimBall with make]]
    - [[http://mysite.verizon.net/astronaut/src/index.html#MKVIMBALL]\
      [C-based program to handle vimballs]]


% vi: ft=viki:tw=72:ts=4
