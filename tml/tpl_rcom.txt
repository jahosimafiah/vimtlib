*rcom.txt*          Evaluate R (www.r-project.org) code via rcom, rserve, screen, or tmux
                    Author: Tom Link, micathom at gmail com

The rcom ftplugin uses one of the following methods to evaluate R code:

    - screen (default, also works under Windows with cygwin/mintty & Windows Rterm)
    - screen or tmux via the screen vim plugin
    - RServe (requires +ruby and the rserve-client rubygem)
    - RCom interface (http://rcom.univie.ac.at; Windows only)

After installation, interaction with R is enabled for all
buffers with filetype r. For other filetypes, you can use the
functions |rcom#EvaluateInBuffer()|.

Features:

    - Evaluate R code
    - Maps for normal, visual, and insert mode
    - Keyword map (|K|)
    - Operator

The following features are supported only with some methods:

    - Omnicompletion for R
    - Get return values from R

Why use this plugin instead of r-plugin? It's hopefully easier to install, 
easier to use.


Caveats:

For the RCOM and rserve methods, it is recommended to set 
|g:rcom#server|. Depending on your OS, your version of ruby & R & 
rcom/rserve, this ftplugin may cause vim to hang or crash. When you run 
the R code via a second instance of GVIM, you won't suffer from such 
hickups. This also has the side effect that you can continue editing 
while R evaluates the code.

For the RCOM method, it is recommended to set |g:rcom#reuse| = 1 and to 
start an instance of RGui (Windows only) before initiating any 
communication via RCOM. 


Maps~

The ftplugin provides several maps (see also |g:rcom_map|, 
|g:rcom_mapp|) to evaluate R code and optionally print the result in 
normal, insert, and visual mode. There is also an operator (see 
|g:rcom_mapop|).


Normal usage~

    0.  Optional steps:
            a. Prepare a running instance of RGui if using the RCOM 
               method.
            b. RCOM and screen methods: The results get printed in the R 
               window. You might want to arrange the windows in a way, 
               so that you can see VIM, R console and R graphic device 
               at the same time.
    1.  Open an R source file in VIM.
    2a. Type <c-cr> to evaluate the current line/visual area in R.
    2b. Type [count]+ or +{motion} to evaluate some text in R. (You can 
        type ++ to invoke |+|.)



-----------------------------------------------------------------------
Install~

Requirements:

    - R

RCOM method:

    - Windows only (because of rcom)
    - A ruby-enabled version of vim -- :echo has('ruby') must print 1
    - A suitable version of rcom (http://rcom.univie.ac.at). The rcom 
      library has to be loaded in vim, which should be the default 
      behaviour after installing rcom. The following code snippet must 
      not throw an error: >

      :ruby require 'win32ole'; r = WIN32OLE.new("StatConnectorSrv.StatConnector"); r.Init("R"); r.Close

RServe method:

    - A ruby-enabled version of vim -- :echo has('ruby') must print 1
    - R rserve library installed
    - rserve-client rubygem installed

Screen method:

    - screen or tmux
    - Eric Van Dewoestine's screen vim plugin installed (see 
      http://www.vim.org/scripts/script.php?script_id=2711)


Edit the vba file and type: >

    :so %%

See :help vimball for details. If you have difficulties or use vim 7.0,
please make sure, you have the current version of vimball
(vimscript #1502) installed or update your runtime.

If you plan to use the RCOM or rserve methods:
After installation, you might want to check the value of
|g:rcom#server| and maybe set it in your |vimrc| file. When this 
variable is set, an instance of gvim will be started that acts as a 
proxy so that the instance used for editing the R file won't be 
blocked.

Also available via git: http://github.com/tomtom/rcom_vim


%s
